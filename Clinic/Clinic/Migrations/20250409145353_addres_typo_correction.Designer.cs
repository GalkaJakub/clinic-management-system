// <auto-generated />
using System;
using Clinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250409145353_addres_typo_correction")]
    partial class addres_typo_correction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Clinic.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("ApartNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Gliwice",
                            HomeNumber = "304",
                            Street = "Akademicka"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "Warsaw",
                            HomeNumber = "26D",
                            Street = "Pine"
                        },
                        new
                        {
                            AddressId = 3,
                            City = "Warsaw",
                            HomeNumber = "25C",
                            Street = "Oak"
                        },
                        new
                        {
                            AddressId = 4,
                            City = "Wroclaw",
                            HomeNumber = "53A",
                            Street = "High"
                        },
                        new
                        {
                            AddressId = 5,
                            City = "Poznan",
                            HomeNumber = "42D",
                            Street = "Oak"
                        },
                        new
                        {
                            AddressId = 6,
                            City = "Krakow",
                            HomeNumber = "97B",
                            Street = "Pine"
                        });
                });

            modelBuilder.Entity("Clinic.Models.Appointment", b =>
                {
                    b.Property<int>("AppointemntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointemntId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointemntId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceptionistId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointemntId = 1,
                            AppointmentDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ból głowy",
                            DoctorId = 1,
                            PatientId = 1,
                            ReceptionistId = 2,
                            RegistrationDate = new DateTime(2025, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Awaiting"
                        },
                        new
                        {
                            AppointemntId = 2,
                            AppointmentDate = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ból zeba",
                            DoctorId = 1,
                            PatientId = 2,
                            ReceptionistId = 2,
                            RegistrationDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Awaiting"
                        },
                        new
                        {
                            AppointemntId = 3,
                            AppointmentDate = new DateTime(2025, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gorączka i mocny ból głowy",
                            DoctorId = 1,
                            PatientId = 4,
                            ReceptionistId = 2,
                            RegistrationDate = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Awaiting"
                        });
                });

            modelBuilder.Entity("Clinic.Models.ExamSelection", b =>
                {
                    b.Property<string>("Shortcut")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Shortcut");

                    b.ToTable("ExamSelections");

                    b.HasData(
                        new
                        {
                            Shortcut = "krew",
                            Name = "Pobieranie krwi",
                            Type = "Lab"
                        },
                        new
                        {
                            Shortcut = "cukier",
                            Name = "Sprawdzenie poziomu cukru we krwi",
                            Type = "Physical"
                        },
                        new
                        {
                            Shortcut = "Gen",
                            Name = "General Checkup",
                            Type = "Physical"
                        },
                        new
                        {
                            Shortcut = "Blood",
                            Name = "Blood Test",
                            Type = "Lab"
                        },
                        new
                        {
                            Shortcut = "XR",
                            Name = "X-Ray",
                            Type = "Lab"
                        });
                });

            modelBuilder.Entity("Clinic.Models.LabExam", b =>
                {
                    b.Property<int>("LabExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabExamId"));

                    b.Property<DateTime?>("AcceptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamSelectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HeadLabNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeadLabTechnicianId")
                        .HasColumnType("int");

                    b.Property<int>("LabTechnicianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabExamId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ExamSelectionId");

                    b.HasIndex("HeadLabTechnicianId");

                    b.HasIndex("LabTechnicianId");

                    b.ToTable("LabExams");

                    b.HasData(
                        new
                        {
                            LabExamId = 1,
                            AppointmentId = 1,
                            ExamSelectionId = "Blood",
                            HeadLabTechnicianId = 3,
                            LabTechnicianId = 4,
                            RequestDate = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Awaiting"
                        },
                        new
                        {
                            LabExamId = 2,
                            AppointmentId = 1,
                            ExamSelectionId = "XR",
                            HeadLabTechnicianId = 3,
                            LabTechnicianId = 4,
                            RequestDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Awaiting"
                        });
                });

            modelBuilder.Entity("Clinic.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            AddressId = 1,
                            Name = "Gabriel",
                            PESEL = "65110414558",
                            Surname = "Drabik"
                        },
                        new
                        {
                            PatientId = 2,
                            AddressId = 2,
                            Name = "Michael",
                            PESEL = "57752850000",
                            Surname = "Brown"
                        },
                        new
                        {
                            PatientId = 3,
                            AddressId = 3,
                            Name = "Emma",
                            PESEL = "18204590000",
                            Surname = "Taylor"
                        },
                        new
                        {
                            PatientId = 4,
                            AddressId = 4,
                            Name = "John",
                            PESEL = "87673060000",
                            Surname = "Brown"
                        },
                        new
                        {
                            PatientId = 5,
                            AddressId = 5,
                            Name = "Emma",
                            PESEL = "99339650000",
                            Surname = "Taylor"
                        },
                        new
                        {
                            PatientId = 6,
                            AddressId = 6,
                            Name = "Anna",
                            PESEL = "73435320000",
                            Surname = "Brown"
                        });
                });

            modelBuilder.Entity("Clinic.Models.PhysicalExam", b =>
                {
                    b.Property<int>("PhisicalExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhisicalExamId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("ExamSelectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhisicalExamId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ExamSelectionId");

                    b.ToTable("PhysicalExams");

                    b.HasData(
                        new
                        {
                            PhisicalExamId = 1,
                            AppointmentId = 1,
                            ExamSelectionId = "Gen",
                            Result = "All good"
                        });
                });

            modelBuilder.Entity("Clinic.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clinic.Models.Admin", b =>
                {
                    b.HasBaseType("Clinic.Models.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            UserId = 5,
                            Login = "Michał",
                            Name = "Michał",
                            PasswordHash = "user5",
                            Surname = "Sikora"
                        });
                });

            modelBuilder.Entity("Clinic.Models.Doctor", b =>
                {
                    b.HasBaseType("Clinic.Models.User");

                    b.Property<int>("NPWZ")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Login = "Jakub",
                            Name = "Jakub",
                            PasswordHash = "user1",
                            Surname = "Gałka",
                            NPWZ = 32
                        });
                });

            modelBuilder.Entity("Clinic.Models.HeadLabTechnician", b =>
                {
                    b.HasBaseType("Clinic.Models.User");

                    b.HasDiscriminator().HasValue("HeadLabTechnician");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            Login = "Jakub",
                            Name = "Jakub",
                            PasswordHash = "user3",
                            Surname = "Gnela"
                        });
                });

            modelBuilder.Entity("Clinic.Models.LabTechnician", b =>
                {
                    b.HasBaseType("Clinic.Models.User");

                    b.HasDiscriminator().HasValue("LabTechnician");

                    b.HasData(
                        new
                        {
                            UserId = 4,
                            Login = "Kacper",
                            Name = "Kacper",
                            PasswordHash = "user4",
                            Surname = "Czerniak"
                        });
                });

            modelBuilder.Entity("Clinic.Models.Receptionist", b =>
                {
                    b.HasBaseType("Clinic.Models.User");

                    b.HasDiscriminator().HasValue("Receptionist");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            Login = "Wiktor",
                            Name = "Wiktor",
                            PasswordHash = "user2",
                            Surname = "Gruszka"
                        });
                });

            modelBuilder.Entity("Clinic.Models.Appointment", b =>
                {
                    b.HasOne("Clinic.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.Receptionist", "Receptionist")
                        .WithMany()
                        .HasForeignKey("ReceptionistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Receptionist");
                });

            modelBuilder.Entity("Clinic.Models.LabExam", b =>
                {
                    b.HasOne("Clinic.Models.Appointment", "Appointment")
                        .WithMany("LabExams")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.ExamSelection", "ExamSelection")
                        .WithMany()
                        .HasForeignKey("ExamSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.HeadLabTechnician", "HeadLabTechnician")
                        .WithMany()
                        .HasForeignKey("HeadLabTechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.LabTechnician", "LabTechnician")
                        .WithMany()
                        .HasForeignKey("LabTechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ExamSelection");

                    b.Navigation("HeadLabTechnician");

                    b.Navigation("LabTechnician");
                });

            modelBuilder.Entity("Clinic.Models.Patient", b =>
                {
                    b.HasOne("Clinic.Models.Address", "Address")
                        .WithOne("Patient")
                        .HasForeignKey("Clinic.Models.Patient", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Clinic.Models.PhysicalExam", b =>
                {
                    b.HasOne("Clinic.Models.Appointment", "Appointment")
                        .WithMany("PhysicalExams")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.Models.ExamSelection", "ExamSelection")
                        .WithMany()
                        .HasForeignKey("ExamSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ExamSelection");
                });

            modelBuilder.Entity("Clinic.Models.Address", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("Clinic.Models.Appointment", b =>
                {
                    b.Navigation("LabExams");

                    b.Navigation("PhysicalExams");
                });
#pragma warning restore 612, 618
        }
    }
}
